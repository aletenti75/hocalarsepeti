// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- MODELS ----------

// Utente
model User {
  id             String         @id @default(uuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // array di preferiti: Postgres supporta gli array nativamente
  favoriteIds    String[]

  // relazioni
  listings       Listing[]
  reservations   Reservation[]
  accounts       Account[]
}

// NextAuth Account (Postgres)
model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// (Se usi NextAuth con Sessioni, decommenta e usa il relativo adapter)
// model Session {
//   id           String   @id @default(uuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// Annuncio/Lezione (ex Listing)
model Listing {
  id             String        @id @default(uuid())
  title          String
  description    String
  imageSrc       String
  createdAt      DateTime      @default(now())
  category       String

  // campi numerici "airbnb-like", li useremo/riutilizzeremo
  roomCount      Int
  bathroomCount  Int
  guestCount     Int

  // località (es. "TR-İzmir" o comprensorio sciistico)
  locationValue  String

  price          Int

  // relazione con User (maestro/host)
  userId   String
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  reservations Reservation[]
}

// Prenotazione
model Reservation {
  id          String   @id @default(uuid())
  userId      String
  listingId   String

  startDate   DateTime
  endDate     DateTime
  totalPrice  Int
  createdAt   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
